generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("New User")
  email         String    @unique
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt 
  password      String?
  description   String?
  followerCount Int       @default(0)
  articleCount  Int       @default(0)
  numberId      Int       @default(autoincrement())

  search       Unsupported("tsvector")? @default(dbgenerated("(setweight(to_tsvector('english'::regconfig, name), 'A'::\"char\") || setweight(to_tsvector('english'::regconfig, COALESCE(description, ''::text)), 'B'::\"char\"))"))
  accounts     Account[]
  Article      Article[]
  AuthorTag    AuthorTag[]
  Replies      Comment[]                @relation("Replied")
  Comments     Comment[]                @relation("Commenter")
  Followers    Follows[]                @relation("Followed")
  Followed     Follows[]                @relation("Follower")
  Notification Notification[]
  VerifiedLike VerifiedLike[]
  VerifiedView VerifiedView[]

  @@index([search], map: "idx_search", type: Gin)
  @@index([createdAt(sort: Desc)])
  @@index([followerCount(sort: Desc), id])
  @@index([numberId, updatedAt(Desc)])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  createdAt         DateTime @default(now())
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model EmailVerifications {
  email     String   @id
  password  String
  code      String   @default(uuid())
  username  String
  updatedAt DateTime @default(now()) @updatedAt
}

model Article {
  id                     String                   @id @default(cuid())
  userId                 String
  title                  String
  content                Json
  description            String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
  tags                   String[]
  dislikeCount           Int                      @default(0)
  likeCount              Int                      @default(0)
  verifiedDislikeCount   Int                      @default(0)
  verifiedLikeCount      Int                      @default(0)
  unverifiedDislikeCount Int                      @default(0)
  unverifiedLikeCount    Int                      @default(0)
  unverifiedViewCount    Int                      @default(0)
  verifiedViewCount      Int                      @default(0)
  viewCount              Int                      @default(0)
  commentCount           Int                      @default(0)
  search                 Unsupported("tsvector")? @default(dbgenerated("(setweight(to_tsvector('english'::regconfig, title), 'A'::\"char\") || setweight(to_tsvector('english'::regconfig, description), 'B'::\"char\"))"))
  numberId               Int                      @default(autoincrement())
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comments               Comment[]
  Notification           Notification[]
  UnverifiedLike         UnverifiedLike[]
  UnverifiedView         UnverifiedView[]
  VerifiedLike           VerifiedLike[]
  VerifiedView           VerifiedView[]

  @@index([search], map: "idx_search_articles", type: Gin)
  @@index([userId, likeCount, id])
  @@index([userId, createdAt, id])
  @@index([createdAt, id])
  @@index([tags], map: "article_tags_gin_index", type: Gin)
  @@index([numberId, updatedAt(Desc)])
}

model Topic {
  name  String @id
  count Int    @default(0)

  @@index([name, count])
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_topic_trgm", type: Gin)
  @@index([count(Desc)])
}

model AuthorTag {
  userId String
  name   String
  count  Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, name])
}

model VerifiedLike {
  userId    String
  articleId String
  isDislike Boolean
  updatedAt DateTime @default(now()) @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, articleId])
  @@index([articleId, isDislike])
}

model UnverifiedLike {
  ip        String
  articleId String
  isDislike Boolean
  updatedAt DateTime @default(now()) @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@id([ip, articleId])
  @@index([articleId, isDislike])
}

model VerifiedView {
  userId    String
  articleId String
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([articleId, userId])
}

model UnverifiedView {
  ip        String
  articleId String
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@id([articleId, ip])
}

model Follows {
  followerId String
  followedId String
  followed   User   @relation("Followed", fields: [followedId], references: [id], onDelete: Cascade)
  follower   User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followedId, followerId])
}

model Comment {
  id           String         @id @default(cuid())
  userId       String
  replyingToId String?
  text         String
  articleId    String
  createdAt    DateTime       @default(now())
  article      Article        @relation(fields: [articleId], references: [id], onDelete: Cascade)
  replyingTo   User?          @relation("Replied", fields: [replyingToId], references: [id], onDelete: Cascade)
  user         User           @relation("Commenter", fields: [userId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([articleId, createdAt, id])
}

model Notification {
  createdAt  DateTime         @default(now())
  articleId  String?
  userId     String
  count      Int?
  startCount Int?
  type       NotificationType
  unread     Boolean          @default(true)
  commentId  String?
  id         Int              @id @default(autoincrement())
  article    Article?         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  comment    Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, unread, createdAt])
}

enum NotificationType {
  like
  comment
  follow
}
